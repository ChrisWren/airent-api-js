<%
function getServicePackagePath() {
  const servicePackage = `${utils.toKababCase(entity.name)}${utils.getModuleSuffix(config)}`;
  return `${config.actionServicePath}/${servicePackage}`;
}
-%>
<% if (utils.isPresentableEntity(entity)) { -%>
  <%_ if (entity.fields.some((f) => f.strings.minVar && f.strings.maxVar)) { -%>
import { getMax, getMin } from '<%= config.airentApiPackage ?? '@airent/api' %>';
  <%_ } -%>
import {
  <%= entity.strings.fieldRequestClass %>,
  <%= entity.api.strings.manyResponse %>,
  <%= entity.api.strings.oneResponse %>,
} from './<%= entity.strings.typePackage %>';
import { <%= entity.strings.entityClass %> } from '../<%= entity.strings.entityPackage %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
import { <%= type.name %> } from './<%= entity.strings.typePackage %>';
  <%_ }); -%>
  <%_ if (entity.api.methods) { -%>
import {
    <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
    <%_ } -%>
} from '<%= entity.api.request.import %>';
  <%_ if (!entity.types.some((t) => t.name === 'RequestContext')) { -%>
<%- config.requestContextImport %>
  <%_ } -%>
import <%= entity.api.strings.serviceClass %> from '<%- getServicePackagePath() %>';
  <%_ } -%>

// api response builders

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
async function buildManyResponse<S extends <%= entity.strings.fieldRequestClass %>>(
  many: <%= entity.strings.entityClass %>[],
  fieldRequest: S,
): Promise<<%= entity.api.strings.manyResponse %><S>> {
  const <%= entity.api.strings.manyEntsVar %> = await <%= entity.strings.entityClass %>.presentMany(many, fieldRequest);
  <%_ entity.fields.filter((f) => f.strings.minVar && f.strings.maxVar).forEach((field) => { -%>
  const <%= utils.pluralize(field.name) %> = many.map((one) => one.<%= field.name %>);
  const <%= field.strings.minVar %> = getMin(<%= utils.pluralize(field.name) %>);
  const <%= field.strings.maxVar %> = getMax(<%= utils.pluralize(field.name) %>);
  <%_ }); -%>
  const cursor = {
    count: many.length,
  <%_ entity.fields.filter((f) => f.strings.minVar && f.strings.maxVar).forEach((field) => { -%>
    <%= field.strings.minVar %>,
    <%= field.strings.maxVar %>,
  <%_ }); -%> };
  return { cursor, <%= entity.api.strings.manyEntsVar %> };
}

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
async function buildOneResponse<S extends <%= entity.strings.fieldRequestClass %>>(
  one: <%= entity.strings.entityClass %>,
  fieldRequest: S,
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const <%= entity.api.strings.oneEntVar %> = await one.present(fieldRequest);
  return { <%= entity.api.strings.oneEntVar %> };
}
  <%_ if (entity.api.methods) { -%>

// api executors
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>

    <%_ if (entity.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
async function getMany<S extends <%= entity.strings.fieldRequestClass %>>(
  query: <%= entity.api.strings.getManyQuery %>,
  rc: RequestContext,
  fieldRequest: S,
): Promise<<%= entity.api.strings.manyResponse %><S>> {
  if ('beforeGetMany' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.beforeGetMany === 'function') {
    await <%= entity.api.strings.serviceClass %>.beforeGetMany(query, rc);
  }
  const many = await <%= entity.api.strings.serviceClass %>.getMany(query, rc);
  if ('afterGetMany' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.afterGetMany === 'function') {
    await <%= entity.api.strings.serviceClass %>.afterGetMany(many, query, rc);
  }
  return await buildManyResponse(many, fieldRequest);
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>

    <%_ if (entity.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
async function getOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  rc: RequestContext,
  fieldRequest: S,
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  if ('beforeGetOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.beforeGetOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.beforeGetOne(params, rc);
  }
  const one = await <%= entity.api.strings.serviceClass %>.getOne(params, rc);
  if ('afterGetOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.afterGetOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.afterGetOne(one, params, rc);
  }
  return await buildOneResponse(one, fieldRequest);
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

    <%_ if (entity.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
async function createOne<S extends <%= entity.strings.fieldRequestClass %>>(
  body: <%= entity.api.strings.createOneBody %>,
  rc: RequestContext,
  fieldRequest: S,
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  if ('beforeCreateOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.beforeCreateOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.beforeCreateOne(body, rc);
  }
  const one = await <%= entity.api.strings.serviceClass %>.createOne(body, rc);
  if ('afterCreateOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.afterCreateOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.afterCreateOne(one, body, rc);
  }
  return await buildOneResponse(one, fieldRequest);
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

    <%_ if (entity.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
async function updateOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  body: <%= entity.api.strings.updateOneBody %>,
  rc: RequestContext,
  fieldRequest: S,
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const one = await <%= entity.api.strings.serviceClass %>.getOne(params, rc);
  if ('beforeUpdateOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.beforeUpdateOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.beforeUpdateOne(one, body, rc);
  }
  const updatedOne = await <%= entity.api.strings.serviceClass %>.updateOne(one, body, rc);
  if ('afterUpdateOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.afterUpdateOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.afterUpdateOne(updatedOne, body, rc);
  }
  return await buildOneResponse(updatedOne, fieldRequest);
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

    <%_ if (entity.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
async function deleteOne<S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  rc: RequestContext,
  fieldRequest: S,
): Promise<<%= entity.api.strings.oneResponse %><S>> {
  const one = await <%= entity.api.strings.serviceClass %>.getOne(params, rc);
  if ('beforeDeleteOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.beforeDeleteOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.beforeDeleteOne(one, rc);
  }
  const deletedOne = await <%= entity.api.strings.serviceClass %>.deleteOne(one, rc);
  if ('afterDeleteOne' in <%= entity.api.strings.serviceClass %> && typeof <%= entity.api.strings.serviceClass %>.afterDeleteOne === 'function') {
    await <%= entity.api.strings.serviceClass %>.afterDeleteOne(deletedOne, rc);
  }
  return await buildOneResponse(deletedOne, fieldRequest);
}
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= entity.api.strings.actionsClass %> = {
  buildManyResponse,
  buildOneResponse,
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= entity.api.strings.actionsClass %>;
<% } -%>
