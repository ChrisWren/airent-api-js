<%
function isDateTypeField(field) {
  return field.strings.fieldClass === "Date";
}

function getApiClientName(entity) {
  return `${utils.toTitleCase(entity.name)}ApiClient`;
}

function presentEntityTypeField(field) {
  const presenter = `${getApiClientName(field._type._entity)}.present`;
  if (utils.isArrayField(field)) {
    return `one.${field.name}.map((nested: any) => ${presenter}(nested, fieldRequest.${field.name}!))`;
  }
  const presentOne = `${presenter}(one.${field.name}, fieldRequest.${field.name}!)`;
  if (utils.isNullableField(field)) {
    return `one.${field.name} === null ? null : ${presentOne}`;
  }
  return presentOne;
}

function presentDateTypeField(field) {
  const presentOne = `new Date(one.${field.name})`;
  if (utils.isArrayField(field)) {
    return `one.${field.name}.map(new Date)`;
  }
  if (utils.isNullableField(field)) {
    return `one.${field.name} === null ? null : ${presentOne}`;
  }
  return presentOne;
}
-%>
<% if (utils.isPresentableEntity(entity)) { -%>
import { Select } from 'airent';
import {
  <%= entity.strings.responseClass %>,
  <%= entity.strings.fieldRequestClass %>,
  <%= entity.api.strings.manyResponse %>,
  <%= entity.api.strings.oneResponse %>,
} from '<%= config.clientTypePath %>/<%= entity.strings.typePackage %>';
  <%_ entity.types.filter(utils.isPresentableEntityType).filter((t) => t.name !== entity.name).forEach((type) => { -%>
import <%= getApiClientName(type._entity) %> from './<%= `${utils.toKababCase(type.name)}-api-client` %>';
  <%_ }); -%>
  <%_ if (entity.api.methods) { -%>
<% if (config.fetchOptionsImport?.length > 0) { -%>
<%- config.fetchOptionsImport %>
<% } -%>
<% if (config.baseUrlImport?.length > 0) { -%>
<%- config.baseUrlImport %>
<% } -%>
import {
    <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
    <%_ } -%>
} from '<%= entity.api.request.import %>';
  <%_ } -%>

function present<S extends <%= entity.strings.fieldRequestClass %>>(
  one: any,
  fieldRequest: S
): Select<<%= entity.strings.responseClass %>, S> {
  return {
    ...one,
  <%_ entity.fields.filter(utils.isPresentableField).filter(isDateTypeField).forEach((field) => { -%>
    ...(one.<%= field.name %> !== undefined && fieldRequest.<%= field.name %> === true && { <%= field.name %>: <%- presentDateTypeField(field) %> }),
  <%_ }); -%>
  <%_ entity.fields.filter(utils.isPresentableField).filter(utils.isEntityTypeField).forEach((field) => { -%>
    ...(one.<%= field.name %> !== undefined && fieldRequest.<%= field.name %> !== undefined && { <%= field.name %>: <%- presentEntityTypeField(field) %> }),
  <%_ }); -%>
  };
}

function presentManyResponse<S extends <%= entity.strings.fieldRequestClass %>>(
  response: { cursor: any, <%= entity.api.strings.manyEntsVar %>: any[] },
  fieldRequest: S
): <%= entity.api.strings.manyResponse %><S> {
  const cursor = {
    ...response.cursor,
    <%_ entity.fields.filter((f) => f.strings.minVar && f.strings.maxVar && isDateTypeField(f)).forEach((field) => { -%>
    <%= field.strings.minVar %>: new Date(response.cursor.<%= field.strings.minVar %>),
    <%= field.strings.maxVar %>: new Date(response.cursor.<%= field.strings.maxVar %>),
    <%_ }); -%>
  };
  return { cursor, <%= entity.api.strings.manyEntsVar %>: response.<%= entity.api.strings.manyEntsVar %>.map((one) => present(one, fieldRequest)) };
}

function presentOneResponse<S extends <%= entity.strings.fieldRequestClass %>>(
  response: { <%= entity.api.strings.oneEntVar %>: any },
  fieldRequest: S
): <%= entity.api.strings.oneResponse %><S> {
  return { <%= entity.api.strings.oneEntVar %>: present(response.<%= entity.api.strings.oneEntVar %>, fieldRequest) };
}
  <%_ if (entity.api.methods) { -%>

    <%_ if (entity.api.booleans.hasGetMany) { -%>
const GET_MANY_PATH = '<%= config.apiPath %>/get-many-<%= utils.toKababCase(utils.pluralize(entity.name)) %>';
    <%_ } -%>
    <%_ if (entity.api.booleans.hasGetOne) { -%>
const GET_ONE_PATH = '<%= config.apiPath %>/get-one-<%= utils.toKababCase(entity.name) %>';
    <%_ } -%>
    <%_ if (entity.api.booleans.hasCreateOne) { -%>
const CREATE_ONE_PATH = '<%= config.apiPath %>/create-one-<%= utils.toKababCase(entity.name) %>';
    <%_ } -%>
    <%_ if (entity.api.booleans.hasUpdateOne) { -%>
const UPDATE_ONE_PATH = '<%= config.apiPath %>/update-one-<%= utils.toKababCase(entity.name) %>';
    <%_ } -%>
    <%_ if (entity.api.booleans.hasDeleteOne) { -%>
const DELETE_ONE_PATH = '<%= config.apiPath %>/delete-one-<%= utils.toKababCase(entity.name) %>';
    <%_ } -%>

const callApi = (
  path: string, 
  body: Record<string, any>,
  options: RequestInit = {}
) =>
  fetch(<%- config.baseUrlImport?.length > 0 ? '`${baseUrl ?? \'\'}${path}`' : 'path' %>, {
    <%_ if (config.fetchOptionsImport?.length > 0) { -%>
    ...fetchOptions,
    <%_ } -%>
    ...options,
    method: 'POST',
    body: JSON.stringify(body),
  }).then((r) => r.json());

  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetMany) { -%>

const getMany = <S extends <%= entity.strings.fieldRequestClass %>>(
  query: <%= entity.api.strings.getManyQuery %>,
  fieldRequest: S,
  options: RequestInit = {}
) =>
  callApi(GET_MANY_PATH, { query, fieldRequest }, options)
    .then((r) => presentManyResponse(r, fieldRequest));
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>

const getOne = <S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  fieldRequest: S,
  options: RequestInit = {}
) =>
  callApi(GET_ONE_PATH, { params, fieldRequest }, options)
    .then((r) => presentOneResponse(r, fieldRequest));
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

const createOne = <S extends <%= entity.strings.fieldRequestClass %>>(
  body: <%= entity.api.strings.createOneBody %>,
  fieldRequest: S,
  options: RequestInit = {}
) =>
  callApi(CREATE_ONE_PATH, { body, fieldRequest }, options)
    .then((r) => presentOneResponse(r, fieldRequest));
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

const updateOne = <S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  body: <%= entity.api.strings.updateOneBody %>,
  fieldRequest: S,
  options: RequestInit = {}
) =>
  callApi(UPDATE_ONE_PATH, { params, body, fieldRequest }, options)
    .then((r) => presentOneResponse(r, fieldRequest));
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

const deleteOne = <S extends <%= entity.strings.fieldRequestClass %>>(
  params: <%= entity.api.strings.getOneParams %>,
  fieldRequest: S,
  options: RequestInit = {}
) =>
  callApi(DELETE_ONE_PATH, { params, fieldRequest }, options)
    .then((r) => presentOneResponse(r, fieldRequest));
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= getApiClientName(entity) %> = {
  <%_ if (entity.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  present,
  <%_ if (entity.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  presentManyResponse,
  <%_ if (entity.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  presentOneResponse,
  <%_ if (entity.api.booleans.hasGetMany) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
    <%_ if (entity.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  deleteOne,
  <%_ } -%>
};

export default <%= getApiClientName(entity) %>;
<% } -%>
