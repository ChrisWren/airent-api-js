<% if (utils.isPresentableEntity(entity) && entity.api.booleans.hasAny) { -%>
import { Context } from '<%- config.api.server.serviceContextPackage %>';
import { <%= entity.strings.entityClass %> } from '<%- entity.api.packages.serviceEntity %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%- type.packages.serviceExternal %>';
  <%_ }); -%>
import {
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from '<%- entity.api.packages.serviceType %>';
import {
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
  <%_ } -%>
} from '<%- entity.api.packages.serviceRequest %>';
import { <%= entity.api.strings.serviceInterfaceClass %> } from '<%- entity.api.packages.serviceInterface %>';
import createHttpError from 'http-errors';
  <%_ if (entity.api.booleans.hasGetMany) { -%>

async function getMany(query: <%= entity.api.strings.getManyQuery %>, context: Context): Promise<<%= entity.strings.entityClass %>[]> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne || entity.api.booleans.hasUpdateOne || entity.api.booleans.hasDeleteOne) { -%>

async function getOne(params: <%= entity.api.strings.getOneParams %>, context: Context): Promise<<%= entity.strings.entityClass %>> {
    <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  const one = await getOneSafe(params, context);
  if (one === null) {
    throw createHttpError.NotFound();
  }
  return one;
  <%_ } else { -%>
    throw createHttpError.NotImplemented();
    <%_ } -%>
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>

async function getOneSafe(params: <%= entity.api.strings.getOneParams %>, context: Context): Promise<<%= entity.strings.entityClass %> | null> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

async function createOne(body: <%= entity.api.strings.createOneBody %>, context: Context): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

async function updateOne(one: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.updateOneBody %>, context: Context): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

async function deleteOne(one: <%= entity.strings.entityClass %>, context: Context): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= entity.api.strings.serviceClass %>: <%= entity.api.strings.serviceInterfaceClass %> = {
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne || entity.api.booleans.hasUpdateOne || entity.api.booleans.hasDeleteOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  getOneSafe,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= entity.api.strings.serviceClass %>;
<% } -%>
