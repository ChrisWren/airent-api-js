<%
function getEntityPackagePath() {
  return `${config.serviceEntityPath}/${entity.strings.entityPackage}`;
}

function getInterfacePackagePath() {
  const servicePackage = `${utils.toKababCase(entity.api.strings.serviceClass)}-interface${utils.getModuleSuffix(config)}`;
  return `${config.serviceInterfacePath}/${servicePackage}`;
}

function getTypePackagePath() {
  return `${config.serviceInterfacePath}/${entity.strings.typePackage}`;
}
-%>
<% if (utils.isPresentableEntity(entity) && entity.api.methods) { -%>
  <%_ if (!entity.types.some((t) => t.name === 'RequestContext')) { -%>
<%- config.requestContextImport %>
  <%_ } -%>
import { <%= entity.strings.entityClass %> } from '<%- getEntityPackagePath() %>';
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
import {
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from '<%- getTypePackagePath() %>';
import {
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  <%= entity.api.strings.getManyQuery %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneRequest) { -%>
  <%= entity.api.strings.getOneParams %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  <%= entity.api.strings.createOneBody %>,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  <%= entity.api.strings.updateOneBody %>,
  <%_ } -%>
} from '<%= entity.api.request.import %>';
import { <%= `${entity.api.strings.serviceClass}Interface` %> } from '<%- getInterfacePackagePath() %>';
import createHttpError from 'http-errors';
  <%_ if (entity.api.booleans.hasGetMany) { -%>

async function getMany(query: <%= entity.api.strings.getManyQuery %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %>[]> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne || entity.api.booleans.hasUpdateOne || entity.api.booleans.hasDeleteOne) { -%>

async function getOne(params: <%= entity.api.strings.getOneParams %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %>> {
    <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  const one = await getOneSafe(params, rc);
  if (one === null) {
    throw createHttpError.NotFound();
  }
  return one;
  <%_ } else { -%>
    throw createHttpError.NotImplemented();
    <%_ } -%>
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>

async function getOneSafe(params: <%= entity.api.strings.getOneParams %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %> | null> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>

async function createOne(body: <%= entity.api.strings.createOneBody %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>

async function updateOne(one: <%= entity.strings.entityClass %>, body: <%= entity.api.strings.updateOneBody %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>

async function deleteOne(one: <%= entity.strings.entityClass %>, rc: RequestContext): Promise<<%= entity.strings.entityClass %>> {
  throw createHttpError.NotImplemented();
}
  <%_ } -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
const <%= `${entity.api.strings.serviceClass}` %>: <%= `${entity.api.strings.serviceClass}Interface` %> = {
  <%_ if (entity.api.booleans.hasGetMany) { -%>
  getMany,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOne || entity.api.booleans.hasUpdateOne || entity.api.booleans.hasDeleteOne) { -%>
  getOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasGetOneSafe) { -%>
  getOneSafe,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasCreateOne) { -%>
  createOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasUpdateOne) { -%>
  updateOne,
  <%_ } -%>
  <%_ if (entity.api.booleans.hasDeleteOne) { -%>
  deleteOne,
  <%_ } -%>
};

export default <%= `${entity.api.strings.serviceClass}` %>;
<% } -%>
